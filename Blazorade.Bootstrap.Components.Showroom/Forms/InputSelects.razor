@code {

	Spacing headingMarginTop = Spacing.S5;
}

<Heading Level="HeadingLevel.H2">FormInputSelect</Heading>
<Paragraph>
	Easily create different kinds of text boxes for a variety of purposes with the <code>FormInputSelect</code> component.
</Paragraph>

<DocsSection ComponentName="FormInputSelect" />

<Heading Id="standard-buttons" IsAnchor="true" Level="HeadingLevel.H4" MarginTop="@headingMarginTop">FormInputSelect</Heading>
<Paragraph>
	Bootstrap buttons come in different styles for different semantic purposes.
	See <Anchor Url="https://github.com/MikaBerglund/Blazor-Bootstrap/wiki/Button#basic-usage" OpenInNewTab="true">the wiki</Anchor> for sample code.
</Paragraph>

<Row class="pl-4 pr-4">
	<Column class="col-12 col-md-6">

		<Heading Level="HeadingLevel.H4">Form Model="editExample" with ModelState = Edit</Heading>

		<Form Model="editExample" OnValidSubmit="Submit_Click">
			<Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator />

			<Row>
				<FormGroup class="col-6" Label="Example 1">
					<FormInputSelect Placeholder="Select a number" Help="Uses <option> tags" @bind-Value="editExample.Example1">
						<option></option>
						<option value="1">One</option>
						<option value="2">Two</option>
						<option value="3">Three</option>
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 2">
					<FormInputSelect Placeholder="Select a number" Help="Uses <Option /> controls" @bind-Value="editExample.Example2">
						<Option />
						<Option Name="Four" Value="4" />
						<Option Name="Five" Value="5" />
						<Option Name="Six" Value="6" />
					</FormInputSelect>
				</FormGroup>
			</Row>

			<Row>
				<FormGroup class="col-6" Label="Example 3">
					<FormInputSelect Placeholder="Select a number" Help="Uses <Option Selected=true />" @bind-Value="editExample.Example3">
						<Option />
						<Option Name="Seven" Value="7" />
						<Option Name="Eight" Value="8" Selected="true" />
						<Option Name="Nine" Value="9" />
						<Option Name="Ten Ten Ten" Value="00000-0010" />
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 4">
					<FormInputSelect Placeholder="Select a number" Help="Auto generated Options" @bind-Value="editExample.Example4">
						<Option />
						@foreach (int i in Enumerable.Range(1, 10))
						{
							<Option Name="@($"{i}")" Value="@($"{i}")" />
						}
					</FormInputSelect>
				</FormGroup>
			</Row>

			<Row>
				<FormGroup class="col-6" Label="Example 5" Help="NOTE: NEVER use for loop. It doesn't work properly. Instead, use foreach with a number.">
					<FormInputSelect TValue="int?" Placeholder="Select a time" Help="Auto generated Options for time" @bind-Value="editExample.Example5">
						<Option />
						@foreach (int i in Enumerable.Range(2, 10))
						{
							double hours = i / 2.0;
							int minutes = i / 2 * 60;
							<Option Name="@($"{hours:0.0}")" Value="@($"{minutes}")" />
						}
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 6">
					<FormInputSelect TValue="double" Placeholder="Select a double" Help="Auto generated list of double values" @bind-Value="editExample.Example6">
						<Option />
						@foreach (int i in Enumerable.Range(0, 15))
						{
							double number = 1 + (i * 0.1);
							<Option Name="@($"{number:0.0}")" Value="@($"{number}")" />
						}
					</FormInputSelect>
				</FormGroup>
			</Row>
			<Row>
				<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
			</Row>

			<Row class="justify-content-center mb-3">
				Submit to copy the values from left to right.
			</Row>

			<Row class="justify-content-center">
				<ButtonGroup class="pr-4">
					<Button IsOutline="true" Color="NamedColor.Secondary" OnClicked="@(e => editExample.ModelState = editExample.ModelState == ModelState.Edit ? ModelState.View : ModelState.Edit)">Toggle</Button>
				</ButtonGroup>
				<ButtonGroup>
					<Button Color="NamedColor.Secondary" OnClicked="Clear_Click">Clear</Button>
					<Button IsSubmit="true" Color="NamedColor.Primary">Submit</Button>
				</ButtonGroup>
			</Row>
		</Form>
	</Column>
	<Column class="col-12 col-md-6">

		<Heading Level="HeadingLevel.H4">Form Model="viewExample" with ModelState = View</Heading>

		<Form Model="viewExample">
			<Row>
				<FormGroup class="col-6" Label="Example 1">
					<FormInputSelect Placeholder="Select a number" Help="Uses <option> tags" @bind-Value="viewExample.Example1">
						<option></option>
						<option value="1">One</option>
						<option value="2">Two</option>
						<option value="3">Three</option>
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 2">
					<FormInputSelect Placeholder="Select a number" Help="Uses <Option /> controls" @bind-Value="viewExample.Example2">
						<Option />
						<Option Name="Four" Value="4" />
						<Option Name="Five" Value="5" />
						<Option Name="Six" Value="6" />
					</FormInputSelect>
				</FormGroup>
			</Row>
			<Row>
				<FormGroup class="col-6" Label="Example 3">
					<FormInputSelect Placeholder="Select a number" Help="Uses <Option Selected=true />" @bind-Value="viewExample.Example3">
						<Option />
						<Option Name="Seven" Value="7" />
						<Option Name="Eight" Value="8" Selected="true" />
						<Option Name="Nine" Value="9" />
						<Option Name="Ten Ten Ten" Value="00000-0010" />
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 4">
					<FormInputSelect Placeholder="Select a number" Help="Auto generated Options" @bind-Value="viewExample.Example4">
						<Option />
						@foreach (int i in Enumerable.Range(1, 10))
						{
							<Option Name="@($"{i}")" Value="@($"{i}")" />
						}
					</FormInputSelect>
				</FormGroup>
			</Row>
			<Row>
				<FormGroup class="col-6" Label="Example 5" Help="NOTE: NEVER use for loop. It doesn't work properly. Instead, use foreach with a number.">
					<FormInputSelect TValue="int?" Placeholder="Select a time" Help="Auto generated Options for time" @bind-Value="editExample.Example5">
						<Option />
						@foreach (int i in Enumerable.Range(2, 10))
						{
							double hours = i / 2.0;
							int minutes = i / 2 * 60;
							<Option Name="@($"{hours:0.0}")" Value="@($"{minutes}")" />
						}
					</FormInputSelect>
				</FormGroup>
				<FormGroup class="col-6" Label="Example 6">
					<FormInputSelect TValue="double" Placeholder="Select a double" Help="Auto generated list of double values" @bind-Value="editExample.Example6">
						<Option />
						@foreach (int i in Enumerable.Range(0, 15))
						{
							double number = 1 + (i * 0.1);
							<Option Name="@($"{number:0.0}")" Value="@($"{number}")" />
						}
					</FormInputSelect>
				</FormGroup>
			</Row>
		</Form>
	</Column>
</Row>

@code {

	private Forms.Models.SelectExample editExample = new Forms.Models.SelectExample { ModelState = ModelState.Edit };
	private Forms.Models.SelectExample viewExample = new Forms.Models.SelectExample { ModelState = ModelState.View };

	private void Submit_Click()
	{
		viewExample.Example1 = editExample.Example1;
		viewExample.Example2 = editExample.Example2;
		viewExample.Example3 = editExample.Example3;
		viewExample.Example4 = editExample.Example4;
		viewExample.Example5 = editExample.Example5;
		viewExample.Example6 = editExample.Example6;
	}

	private void Clear_Click()
	{
		editExample.Example1 = string.Empty;
		editExample.Example2 = string.Empty;
		editExample.Example3 = string.Empty;
		editExample.Example4 = string.Empty;
		editExample.Example5 = null;
		editExample.Example6 = 1.3;
	}

}